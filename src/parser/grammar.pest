token = _{
  none | expression | integer | list |
  // ordering is important! symbol must come after
  // any literals in the parser, or symbol will match first.
  // e.j. "true" will be a symbol if the rule is after symbol.
  string_with_quotes |
  bang_symbol | true_value | false_value | symbol | map
}

expression = { "(" ~ delimiter? ~ token_list ~ delimiter? ~ ")"}
integer = { digit+ }
list = {"[" ~ delimiter? ~ token_list ~ delimiter? ~ "]"}

token_list = _{ (token ~ delimiter?)+ }

digit = { '0'..'9' }
none = { "None" }
newline = { "\n"+ }
symbol = { ('a'..'z' | 'A'..'Z' | "+" | "=" | "-")+ }
bang_symbol = { "!" ~ symbol }
// this rule is not named 'whitespace', as that has a
// special meaning in pest.
delimiter = _{ (" ")+ }
map = { "{" ~ delimiter? ~ "}" }
true_value = { "true" }
false_value = { "false" }
string_with_quotes = _{ "\"" ~ string ~ "\""}
// string = { (any ~ !"\"")+ }
string = { ('a'..'z' | 'A'..'Z' | "#" | " " | ":" )+ }
