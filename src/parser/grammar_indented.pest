head = _{ list_of_lines ~ EOI }
list_of_lines = {
  expression_no_parens ~ ("\n" ~ PEEK_ALL ~ expression_no_parens)*
}
expression_no_parens = {
  (token ~ delimiter_no_newline?)+ ~ ("\n" ~ indented_list)?
}
indented_list = _{ PEEK_ALL ~ PUSH(indentation) ~ list_of_lines ~ DROP }
delimiter = _{ (delimiter_no_newline | "\n" | "\t")+ }
delimiter_no_newline = _{ (" ")+ }
indentation = _{ ("\t")+ }
token = _{
  none | expression | integer | list | map |
  // ordering is important! symbol must come after
  // any literals in the parser, or symbol will match first.
  // e.j. "true" will be a symbol if the rule is after symbol.
  string_with_quotes | bang_symbol |
  true_value | false_value | symbol
}
none = { "None" }
expression = { "(" ~ delimiter? ~ token_list ~ delimiter? ~ ")"}
integer = { ('0'..'9')+ }
list = {"[" ~ delimiter? ~ token_list? ~ delimiter? ~ "]"}
map = { "{" ~ delimiter? ~ (token ~ delimiter? ~ ":" ~ delimiter? ~ token ~ delimiter? ~ "," ~ delimiter?)* ~ "}" }
string_with_quotes = _{ "\"" ~ string ~ "\""}
bang_symbol = { "!" ~ symbol }
true_value = { "true" }
false_value = { "false" }
symbol = { ('a'..'z' | 'A'..'Z' | "+" | "=" | "-")+ }

string = { ('a'..'z' | 'A'..'Z' | '0'..'9' | "#" | " " | ":" )+ }
token_list = _{ (token ~ delimiter?)+ }
