use super::ast;

pub symbol -> String = match_str:$([a-zA-Z0-9_=+]*) { match_str.to_string() }

pub newline -> bool = [\n]+ { true }

pub integer -> i64 = i:$([0-9]+) { i.parse().unwrap() }

pub spaces -> usize = s:" "+ { s.len() }

pub token_list -> Vec<ast::Token> =
  t:token spaces tl:token_list newline? {
    let mut new_tokens = Vec::new();
    new_tokens.push(t);
    new_tokens.extend_from_slice(&tl);
    new_tokens
  }
  / t:token {
    let mut new_tokens = Vec::new();
    new_tokens.push(t);
    new_tokens
  }

token -> ast::Token =
      i:integer { ast::Token::Integer(i) }
    / s:symbol { ast::Token::Symbol(Box::new(s)) }
    / "[" tl:token_list "]" { ast::Token::List(tl) }