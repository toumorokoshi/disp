#[derive(Clone)]
pub enum Op {
    ArrayCreate{target: usize, length_source: usize},
    ArraySet{source: usize, target: usize, index_source: usize},
    ArrayLoad{source: usize, target: usize, index_source: usize},
    Assign{target: usize, source: usize},
    BoolNot{source: usize, target: usize},
    BoolLoad{register: usize, constant: bool},
    // if the condition is true, continue down the registry.
    // if the condition is false, jump n instructions to the registry.
    BranchTrue{condition: usize, if_true: usize},
    BranchFalse{condition: usize, if_false: usize},
    FloatAdd{lhs: usize, rhs: usize, target: usize},
    FloatCmp{lhs: usize, rhs: usize, target: usize},
    FloatDiv{lhs: usize, rhs: usize, target: usize},
    FloatLoad{register: usize, constant: f64},
    FloatLessEqual{lhs: usize, rhs: usize, target: usize},
    FloatLessThan{lhs: usize, rhs: usize, target: usize},
    FloatMul{lhs: usize, rhs: usize, target: usize},
    FloatSub{lhs: usize, rhs: usize, target: usize},
    Goto{position: usize},
    IntAdd{lhs: usize, rhs: usize, target: usize},
    IntCmp{lhs: usize, rhs: usize, target: usize},
    IntDiv{lhs: usize, rhs: usize, target: usize},
    IntLessEqual{lhs: usize, rhs: usize, target: usize},
    IntLessThan{lhs: usize, rhs: usize, target: usize},
    IntLoad{register: usize, constant: i64},
    IntMul{lhs: usize, rhs: usize, target: usize},
    IntSub{lhs: usize, rhs: usize, target: usize},
    Noop{},
    Return{register: usize},
}
